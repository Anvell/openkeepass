package de.slackspace.openkeepass.crypto;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import java.io.IOException;
import java.nio.charset.StandardCharsets;

import org.junit.Assert;
import org.junit.Test;

import de.slackspace.openkeepass.crypto.sha.Sha256;
import de.slackspace.openkeepass.domain.CompressionAlgorithm;
import de.slackspace.openkeepass.domain.CrsAlgorithm;
import de.slackspace.openkeepass.domain.KeePassHeader;
import de.slackspace.openkeepass.util.ByteUtils;

public class DecrypterTest {

    @Test
    public void shouldEncryptAndDecryptDatabaseV3Format() throws IOException {
        String password = "abcdefg";
        byte[] passwordBytes = password.getBytes("UTF-8");
        byte[] hashedPassword = Sha256.getInstance().hash(passwordBytes);

        KeePassHeader keepassHeader = new KeePassHeader();
        keepassHeader.setValue(KeePassHeader.MASTER_SEED, ByteUtils.hexStringToByteArray("35ac8b529bc4f6e44194bccd0537fcb433a30bcb847e63156262c4df99c528ca")); // master
        // seed
        keepassHeader.setValue(KeePassHeader.TRANSFORM_SEED,
                ByteUtils.hexStringToByteArray("0d52d93efc5493ae6623f0d5d69bb76bd976bb717f4ee67abbe43528ebfbb646")); // transform
        // seed
        keepassHeader.setValue(KeePassHeader.TRANSFORM_ROUNDS, ByteUtils.hexStringToByteArray("401F000000000000")); // transform
        // rounds
        keepassHeader.setValue(KeePassHeader.ENCRYPTION_IV, ByteUtils.hexStringToByteArray("2c605455f181fbc9462aefb817852b37")); // encryption
        // IV
        keepassHeader.setCompression(CompressionAlgorithm.Gzip);
        keepassHeader.setCrsAlgorithm(CrsAlgorithm.Salsa20);

        byte[] data = ByteUtils.hexStringToByteArray(
                "69d788d9b01ea1facd1c0bf0187e7d74e4aa07b20d464f3d23d0b2dc2f059ff8000000008e0c5564df5e72b78c7b009b3e4a494e05c0d0387957d246d6b8cc8489e4ba19ad0600001f8b0800000000000400ed5adb6ee248107d66a5fd07c4be6d94d8e616888c4704cce40664b824b3f3b26a4c010ec626dd4d08339a7fdff615dbb48164273b62365114e1ea53d5edf63955d50ef287e799917e024c74cbac64a41331930653b386ba39ae641674745ccaa40945e61019960995cc0a48e683f2fb6ff235c02d22a4a11bc02e53721328b23fa4e48f600246d4c28a879185b5c941d411450344a08566a0f48050df200b91a10d706d82cc310c95ac28e58f25e9389bed89e5b342f92c57fe12f5f591911075201ad6e794ddab72b520348dd204cde606a48783b57b1895e4bedf42380e6e4018a18541fb04b0bdd6b4c03527cc513a2b14ed39f860275013e9260513991a5ce8846dfbaa8e5644c9150bb29030e6f8d52cc3c2fe6a9a8850c0d7b0dabe8e0d18cfb9039a722c6d806d330fdeb0b0063c0777c07581195bfb2db62868c1a34ac99ea1a753c6cb06326c4e456c1198bf7b3164608e806d2a2f2d3c547a78b1c606d668e0ce4d3c26b344202df697c440aecdb93f817b8332dbb29566c0b96eaa261a18e0af66d31e83f7fb9775a5cafda954c2fe0e30e6bc9d029b38c75d35295ef580e90bb1bbfa88adc57ccb0278e8a430db97b3c5c109e8d1be899e2f29cc882289b210b7c5805dfd2b28c56c59ca178a61b06377b0378ca85d30d8a382a1bbf8c6e353f3aab47a30faddaa4acbed59abfb90756e75131b84e859f33b9de8ec01ba03067e5ae256365750a19d3f6ab7c70df5a1b3f483c4d14e18f61810d681f83aaeb14467cdec94e45a6c66b9a95aee5816f57276e09f921d02244f1cf023253b1aa191fc1d928d43666f1529f952b34ce6982fcb82f7d1b5f7f49947796f0b9aacf88c740dd99cb707139e3217ea85a961d8e51e818466af6a1a10c27364bf396fde10c873559fe73a231d773ec9760b01c22eeb0ce05f7aa37d82c650b31626554a6ccfd757fe5a2df7b6b74b218e72b75c08edb97c49d8ccacbe0799246470115ea5a92ea8d55bcda10b8f0bd62240f064dd84e30f2be6c2306c11468c61641710d626acc18840d756171be5b7a3e92dd98387f6e70c3efbd4d607c39bfb5249eb17cf9ff0ed27e3e9fab1598d523be0ab18a56b4a662508c64c2de6305c2d6ddd216dca1d68b3f60aeb436015606deca131095d8544b09f0abc4e638b0ab6cbc0f3e7c860b70ef285241dbc46083b94109182c491c24e2df85bc5d342540c29b94b71404176c91a0fc54963b2607ff4cd77c858803fe05ef8d1220178e1fc7e811331ed157b185632b616334a3f57a6d74f77aa59562b2f9ec9e977780befba3dafa38c1747652ce6c59c503a3f138429c09cdde0896e8e2ce1e5b1bdbe8b37813d967607b7458d669c20e7f8c92ddc1ca5bcd6be8791494680db83d182b81cb1659f34e4bb5609b1343d624bc9f7ba39b4964a0fe131d0b47b250b9e3540b1bb23145bd320972adffa5db5d3aa36d5efdf7ad5f3efdf6eabddee7dbb53f72ed5564fed7c77b625e6e8af46d85c0eb34537c36f6882cc2d6c4f9417a7b9d1d7bb1be1a2bf58156ba3ac06bdc7cbf17ba2dc3f5196fe4f89f24599edbe51ec5fa1e51b65b5f41fd9b74c6c1330e6c274c07ec5b298178b7fdb3df0c8c2b393099d193f34ed35756d82c0c865a583c87b6c1fd24cf8b3f471da7bf9f3e71ee92fd0f78fc863a1a38c97c7924f62e13ce69c5cdc175546f81c133bc8ac4f32a578c63bace4947c9a79ebe4947bebe4b4f34cb3f350f38253cd8b8e35fc73cde339993db5af6735f1b1b3babc6aa3ac5eed6c3fd744ebb547f4e43821a22756ece4929d5cb3f9453b56b563cad82d0d493c13c5b3acb8431abbb451282468639b3862736f8ae355ead8258fddc57b0f8138f7cb17484c21f1329474d2f1ab50f465b9c970d16a142f47fcf8dc0621b14380c9d174727ff757eb34f7b1599586a57151fa5cea4f8ab569e535b36f360e418d5d718e42fb058d370db1ae616c5963034e346bf6aae0bcbe60bd687b7857d8785bb0a32ff8578d41bc4c6fd4e958a116c22f1d37ab36fe4c4feb476a53101fef253cbe3dcf8f0be6925bb5dd0683ec53b573875eb5a55ff648716855fb356f237770bebe1c56d1b599a7eaea73c3e8178a42b67ffe89cbf91650964ba77b71feb0291fccfc9f535e7ca7fc9b53bed61ef7f12d2ddc8ac5d3621d565f4c012df894bf34296013e83e9c970e9bf385eccfe27cf69df36fce79e1f97ed41e99b5e2543f2d92d6047fe99c627e6b034da4eff53a422a1f36e3dfb3fcafccf8cef08166a52b0389476ae1535935ae2e96d2c6bf121c965f5833182073ca16b95773737ad8bcff7999febda1ffb1bc8f7cae83011486edc1036894f8dfbcf1be70631fe8d7df9efc076926aea08429000001000000000000000000000000000000000000000000000000000000000000000000000000000000");

        CryptoInformation cryptoInformation = new CryptoInformation(keepassHeader);
        byte[] encryptedDatabase = new Decrypter().encryptDatabase(hashedPassword, cryptoInformation, data);
        byte[] decryptedDatabase = new Decrypter().decryptDatabase(hashedPassword, cryptoInformation, encryptedDatabase);

        Assert.assertArrayEquals(data, decryptedDatabase);
    }

    @Test
    public void shouldEncryptAndDecryptDatabaseV4Format() throws IOException {
        byte[] encryptedDatabase = ByteUtils.hexStringToByteArray(
                "03d9a29a67fb4bb500000400021000000031c1f2e6bf714350be5805216afc5aff03040000000100000004200000001e0df1c39946653bb3089d4b15b04b3da33762ba20c56a67b9b30ca2e61e9dd70b8b00000000014205000000245555494410000000ef636ddf8c29444b91f7a9a403e30a0c040100000056040000001300000005010000004908000000020000000000000005010000004d0800000000001000000000000401000000500400000002000000420100000053200000007ea16ccbf5f48cb5f77b01a9192123164c5f5f5245a10e5f9c848f47f0c93a4c000710000000ea17bde395df2917b8db80ef1530949800040000000d0a0d0ade7024aa6a931e26e116414362448ebabc152b8f03893478bcc831161370cadfbeecff382a61cef35650042fa0a7a47d43bb000658b07bee8c8af2b71d3b87ed5b713003e5112d9e729929aba17279a1bfd53216824e819a28fd0e697e2c6a8f300600000169e77f4fe1cefecdaea5fa34561281aa94a50f2e8dc21d05c50b9fbdf05c2b69c97771c4b9e474fcfd0ea1d8c81b4f2579b62b275d87f9e92366d9539226e02e559eb1c176efa9062817ad4d8bab805e429edeb8c6bd4f0927470ca161174211723c2a68dd9b0942b33ce2a4b7188b50ddf7c8996d3386f540877d115c2c2678c610cd9bc8ca2e70434103864e0ed941f491b49f08394c1b829db4f8b9b06c874ae4665b5d5d4b40f825d2eebbc03f6b50bfa36b20b0ae450962aa71b8734240f1153edf9ac06957bab29b01e1e7448df5ad39442685c90b4168568e8cf97da91ad21fa6af7bcdf60fbbf9ac2020b81d3154fa19d8dd505f0752bec3f16f1447f7efae7dfb2e049f1cd8ed2678138f7edbefddee4fe2dd06215cf414f7c4ab3ea577c12a73cb624c48a95e2a80f826005b752766e5a4801db722010746f980aa1a2ec49dcde65e431993ad3cabda2899bd94f56ee337e262e1adac5d188ea4354bd8d4b1571d7e78e02dc309ed140cac1d3c07f906c413cf164a041da4fa1fd51542c1364c97669a0307f53deef612ffcbe14f048446a81260eb975425b75747b471922b77bcea78a5084c6d69978afd72c84b346e31ccadf26d2483bd3e9fc5a7d0299f33ae9e8c3c279856101470baf004a185ffe84bfeb94f0a70a31df6c70b084b293b85576f3b41f6893de4869227e1f60054084e821e34ffc1057b48a582ed6982c75d1dde1d7c16ca7d9dbbf8e438a028a3bfbe5eda2614d0f8c88c14cd05c69b89b9be17d6f291adf0b30f32a682b20cf529a7c5393bef717f921d495b70f744c8e9075d9bb003b8f4a4d829376075a70d7e913b0d19cd0af943930a28383d0bb8744ff5b6d4ad862e4db08235bf96a697693c417d1313418e14473aa948fe684bb6aa7a5819b61c6649b7b721ef881c1e53cca2f5657b56b8175e0fbfb1665599c3bddae9c821e1e3d96ab7d1b908f5ed5ef22efaf49c1aa365deaa0efa8a6969fb2026a1cb0061a17a98aad031a3b14d565fbe62e9679ce459a60d607296143fb7405c7adbe1f09f9bc382f0c785fdf16c309075a948afd4b40bdcf01a1784f9c37399c77f32a7978c1c96c23932255f51e53325ecfd356c8443942fd7dc7c70c1bbfce170ed4326af7d8c0509992e6207437ab136f8d7ea573cf58aa26ff626f9b927ae337343c1ecd4490395c2408da9c96ff442c0f56202367a0dd2154b0793fefcea3283396b0ea7e1ad3d4a817703b3adf1c749d5acb19efe403265c76c3a1af38f138a46cead54949252acd31b9c1d542ad127315876f53f2bf51948f6b3bfab167508b54621ec7ae6d542773c12448e15f5a79f321898e439eb6cfa53851c9f415908d7c108f79b4412cfb97585bd0f2aeb3b708b2496c6610db41c719481e8b5faa1ecb36a111b6ff9f256ab8e3b4a0a141132ee4a2851e17636beb66f06c90d0cf20c7f91e49d9491a360a6f15d1d9209061fed8ded696a133f78043eaa28c9e4347330e5b2dd5884cb07460d47899aa9d5cf2199ce504635932a15469a7d24739f11c7c56ccc97cab1c14ad15ac30063fe0e74bcb98d120d9b2f05d0f812969726e7dea390ba59b6b616be6926581bdf2cfaee2f95707a5faa466e6cf4801a02abdf785c82e6acdebdc849abdd48f9ae65ff98a67be6a812ec5a5f3453a984936c8b420db908fcf0c08622ef7e640c1a632a3e4cbf6633cc9aeaac6ed4ea0490c70d2a639c67b87e5e6209f9b9bd8f457f3e4fcac2eee43d0a2d0d0d9386e2af2af512f2a2842394f6d8d7010ed256a780dcf061b8c131215a875054e158f641f82ee907768e46bce3355cdf80dadf079201261038eb2b00950d29f5bf546a602314ec78ba9e1dbf4e670a312e11a1035403781eb268fa2e4df0b41a7082da9e3d4bb0e363e5b7a6f816a4febcde999a2bf8b53e7fc9dbd20c4c1eb8ace3d385ddbbce9842b7f439f98d1da7224c3f0b440501359060f7e712813d93515d9dc37cae04199a58060e702904796c3d8d3264a37bfcd7ac784f594a148fd807fedebdcdc4657887cc22d8bbf07b3e69a662bd83722bdaa0ba40a4e68b8ed301ba45505066e47769b4c43fb48ccb1250d1aa12fc6d2f9939aa90381f80c65e1b5732cb0f7dbcc3bac08987817f305afe602732328261300a1201449f6595b8c20c5cfcccb8b1d35d4751558ddb36717defe1e371b2f484adb08ff91bd679c799a2f5ed33f441e61384f0fa2f233412c5722a4884d16395b458acf7ee534879a22dd703006a913800000000");
        KeePassHeader keepassHeader = new KeePassHeader();
        keepassHeader.checkVersionSupport(encryptedDatabase);
        keepassHeader.read(encryptedDatabase);

        String password = "123";
        byte[] passwordBytes = password.getBytes(StandardCharsets.UTF_8);
        byte[] hashedPassword = Sha256.getInstance().hash(passwordBytes);

        CryptoInformation cryptoInformation = new CryptoInformation(keepassHeader);
        byte[] decryptedDatabase =
                new Decrypter().decryptDatabase(hashedPassword, cryptoInformation, encryptedDatabase);

        assertThat(ByteUtils.toHexString(decryptedDatabase), is(
                "1f8b0800000000000400ed5acf6b23551cafae8811761144590f0b2182872ddd49dab4dbe864d6b449d3b4cd8f2693fed88bbc4cbe4966339997ce7bd3265df6a62c8247cf9e750f1ebc088257bd8aa0a26741f02ff0a0e09b9f99994cda04b60531818679dfefe7fb7dbf3eeff3de9bf485971616166eb0bf17df675f5f257ef8fc8d77defaf3f65fdf3cfbe8e69b1fdffef5d317bffee3bddf6f7c913879edcba7b78f3fbc33f8e946f5e7ef9e7dfbc9dedffaebaffcb6d4fbece55bdfdfbab3f3cf8f4feffcb2607cf807839e123d058dc8584dc712f7e2b128a8126eca6a3b1dd3696b693d162514a94da46015d2b12190d803e1e6abfc2e400511b2252bc08a11be0814190f113e0f2a6888624db0313c373299881a50ca2a209b1da4b6a1292c770e703c93ccb04f9ae7825e33248b286a200225d48328376e73c0e7036faa30842f340b44d2e43e65bd0f66f5b82e4e1e02b412410be90aad13d07cadf69b27e40e0799098a485629a84895605b266c5087593424c2cada2acf4df099719b58c19ad38a222214b45d1886d73fe60e0baa82242c25c6c086390cbe853509c2022c8715023dd6e68a862948c6809ad6086f1b449932b66d218500cff96c3e98336a01a46bf6810d829e61ad29889a3ec2ba567fe2ea5e3027b3f82025f64d0220cb66f68f0bed20cf866c2829b021ab39153514705a336e0fc0ebf54256c8847ed2696fbc090c04874ffdb8df0ccba9541b8ad0eb2b88f526af61bd7f41c561e84969c29b7101d04c64d3bb8806050a3d2224e23c17b4058035f91c84b5e55422b9bae6059b7613bbc7885903854d0d34ad46a7b69a29299b2fa5e27ab6b828ee6576f66b676617c7b16e0a11f70f6422b3099b2649106d2d569db5ae67488cb5620de65802cb5731a6b6d2baf8086f4ef0e48adcf98ff0e61a70c4eb34f9810648e139cfca30f96a0b45842f485865b1c914cfd98f965d947b36ab8de6b224069d0d6360227d2e1b6e74bbc83699962c4d0a0b8578c2339204844c08f438ed90dca02f333e191652f5f16ce4f042478bd829dade3a416dd8c4ba4a05c6384fc9691bb6da1bceeaa0d71a4ace33967c81b01ad986eb8a80c76021eccd21a3532c0efb5083139dedd9e0ce98a5158e5b50754531d693cfe845d6006952876db93ee8c86a61fd543597a790cf75e2ab8f9a957c7c98abad3506c56ea3d50f21b68576ea749f6dd64ece3262adcbc3b89f86119eed1ed0660b416d7a3738e6d8405237d45166e71d4d6e0213ef9151446de22979c81d60b7ffb012c2ee09f4f6c75d40ef317e8f478ef17b16825fc2f04b293ecef14003c338ee27393b0252cda5162bb2b38060ca0ecf198f8ef900293a380eabe064f325084be76ce12119a3f6fe0bcd74cc58633141a21b297c4cca0f07fbe9996b328f20610daf21b67d41d464fccc59193bc3727628edbfcb715d803eebe03d596d616ef6dcf65128ac02c317b59c1765f52b89ab258e6879cf2b11fb542d6a48252dd0ca8d964e2c8e18049be4724233846049f6d922fca1ac36f1992022ad0d346a9578ceb6ba28d63b4235dc753552785cafe5aaa54c31f7e4b198d978f2b892a9d50ecbd5ac5dcc95c45cf589392c8140a735dc787398cd3f18ce99c35564ee6201d4ab1b2b3ba5a3e55afcf0219677568e062aa79fcd05f07f26803329d6eafd35dce8b7af48ada26f2f5fa5607540e973dd06c7749db6b0d6bbd7a13de5b9aa5851963a089495e5c47f41c6ee8a6c20a26c21f7a24b51fbadc9dd29e4cc5dafcf43973cb7095b9712497632abf4ca8fba27a7abadcd7ca1b2b876ba1fd425f3e660bde1f1dd23021789d14d623da86073b1b962b1b9f44e71e9a562865bc54cd78af07bc5e4170b93ef159cf7363ccee5fd5cbd3ed8a9d44937bf5bca7465f1b47aa08773d95a76641a2eafccb93ce7f2b5737998c587438edb5dc9ed6e6736b68f16b771411cbb309bec2d0165478aee545c9e53794ee5eba67279bdb19a7a78b675901b2a8b6a3f59cce7868db1ab8f49de824a4153814ec3e5c49ccb732e5f37974fd687cdfe79b799accbe78d3277983a3e4fdd0f3f624011c9531d9613a93993e74cbe6e26a77455ab1f1cefacd46bf5e16eaeafebfa51239cc9dbb8070da4765923a73a64dc9ff379cee7abe4b3ef390b0a5068961b8f40a2c4f929d5fe05d5786f34fa27967f018bd3a7095e230000"));
    }
}
